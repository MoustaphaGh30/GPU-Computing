
#include "common.h"

#include "timer.h"

#define TILE_DIM 32
 
__device__ __shared__ float tile_A_d[TILE_DIM][TILE_DIM];
__device__ __shared__ float tile_B_d[TILE_DIM][TILE_DIM];

__global__ void mm_tiled_kernel(float* A, float* B, float* C, unsigned int M, unsigned int N, unsigned int K) {

    // TODO
    
    int row=blockDim.y*blockIdx.y+threadIdx.y;
    int col=blockDim.x*blockIdx.x+threadIdx.x;
    float sum=0.0f;

    for(unsigned int i=0;i<(K+TILE_DIM-1)/TILE_DIM;++i){
        if(threadIdx.x<K){
	tile_A_d[threadIdx.y][threadIdx.x]=A[i*TILE_DIM+row*K+threadIdx.x];
	__syncthreads();
	}
	if(threadIdx.y<M){
	tile_B_d[threadIdx.y][threadIdx.x]=B[(i*TILE_DIM+threadIdx.y)*N+col];
	__syncthreads();
	}
	for(unsigned int j=0;j<TILE_DIM;++j){
		if(threadIdx.x<K&&threadIdx.y<K)	
		sum+=tile_A_d[threadIdx.y][j]*tile_B_d[j][threadIdx.x];
	}
       __syncthreads();	
    
    
    }
    C[row*N+col]=sum;

}

void mm_gpu(float* A, float* B, float* C, unsigned int M, unsigned int N, unsigned int K) {

    Timer timer;

    // Allocate GPU memory
    startTime(&timer);
    float * A_d,* B_d,* C_d;
 

    cudaMalloc((void**)&A_d,M*K*sizeof(float));
    cudaMalloc((void**)&B_d,K*N*sizeof(float));
    cudaMalloc((void**)&C_d,M*N*sizeof(float));






    cudaDeviceSynchronize();
    stopTime(&timer);
    printElapsedTime(timer, "Allocation time");

    // Copy data to GPU
    startTime(&timer);

    cudaMemcpy(A_d,A,M*K*sizeof(float),cudaMemcpyHostToDevice);
    cudaMemcpy(B_d,B,K*N*sizeof(float),cudaMemcpyHostToDevice);






    cudaDeviceSynchronize();
    stopTime(&timer);
    printElapsedTime(timer, "Copy to GPU time");

    // Call kernel
    startTime(&timer);

    dim3 numThreadsPerBlock(32,32);
    dim3 numBlocks((numThreadsPerBlock.x+N-1)/numThreadsPerBlock.x,(numThreadsPerBlock.y+M-1)/numThreadsPerBlock.y);
    mm_tiled_kernel <<<numBlocks,numThreadsPerBlock>>>(A_d,B_d,C_d,M,N,K);





    cudaDeviceSynchronize();
    stopTime(&timer);
    printElapsedTime(timer, "Kernel time", GREEN);

    // Copy data from GPU
    startTime(&timer);

    cudaMemcpy(C,C_d,M*N*sizeof(float),cudaMemcpyDeviceToHost);





    cudaDeviceSynchronize();
    stopTime(&timer);
    printElapsedTime(timer, "Copy from GPU time");

    // Free GPU memory
    startTime(&timer);

    cudaFree(A_d);
    cudaFree(B_d);
    cudaFree(C_d);


    cudaDeviceSynchronize();
    stopTime(&timer);
    printElapsedTime(timer, "Deallocation time");

}

